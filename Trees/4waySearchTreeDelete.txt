#include<stdio.h>
#include<stdlib.h>
#define MAX 3
#define MIN 1
struct node
{
    int count;
    int value[MAX+1];
    struct node *child[MAX+1];
};
struct node* insert(int,struct node*);
int setval(int,struct node*,int*,struct node**);
void display(struct node*);
int searchnode(int,struct node*,int*);
void fillnode(int,struct node*,struct node*,int);
void split(int,struct node*,struct node*,int,int*,struct node**);
struct node* del(int val,struct node* root);
int delhelp(int val,struct node* root);
void clear(struct node*,int k);
void copysucc(struct node* k,int i);
void restore(struct node* k,int i);
void rightshift(struct node* p,int k);
void leftshift(struct node* p,int k);
void merge(struct node* p,int k);
int main()
{
    struct node* root;
    root=NULL;
    int n,i,*arr,data;
    printf("\nEnter the number of elements you want to insert in the 4-way search tree: ");
    scanf("%d",&n);
    arr=(int*)calloc(sizeof(int),n);
    printf("\nEnter the number you want to insert in the 4-way search tree separated by gaps: ");
    for(i=0;i<n;i++)
        scanf("%d",&arr[i]);
    for(i=0;i<n;i++)
        root=insert(arr[i],root);
    printf("\nThe 3-way search tree is:");
    display(root);
    fflush(stdin);
    printf("\nEnter the element you want to delete from the 4-way search tree:");
    scanf("%d",&data);
    root=del(data,root);
    printf("\nThe 3-way search tree after deletion is:");
    display(root);
    return 0;
}
int setval(int val,struct node *n,int *p,struct node** c)
{
    int k;
    if(n==NULL)
    {
        *p=val;
        *c=NULL;
        return 1;
    }
    else
    {
        if(searchnode(val,n,&k))
            printf("\nKey value %d already exists!",val);
        if(setval(val,n->child[k],p,c))
        {
            if(n->count<MAX)
            {
                fillnode(*p,*c,n,k);
                return 0;
            }
            else
            {
                split(*p,*c,n,k,p,c);
                return 1;
            }
        }
        return 0;
    }
}
struct node* insert(int val,struct node* root)
{
    int i,flag;
    struct node *c,*n;
    flag=setval(val,root,&i,&c);
    if(flag)
    {
        n=(struct node*)malloc(sizeof(struct node));
        n->count=1;
        n->value[1]=i;
        n->child[0]=root;
        n->child[1]=c;
        return n;
    }
    return root;
}
int searchnode(int val,struct node* n,int *pos)
{
    if(val<n->value[1])
    {
        *pos=0;
        return 0;
    }
    else
    {
        *pos=n->count;
        while((val<n->value[*pos])&&*pos>1)
            (*pos)--;
        if(val==n->value[*pos])
            return 1;
        else
            return 0;
    }
}
void fillnode(int val,struct node* c,struct node* n,int k)
{
    int i;
    for(i=n->count;i>k;i--)
    {
        n->value[i+1]=n->value[i];
        n->child[i+1]=n->child[i];
    }
    n->value[k+1]=val;
    n->child[k+1]=c;
    n->count++;
}
void split(int val,struct node* c,struct node* n,int k,int *y, struct node** newnode)
{
    int i,mid;
    if(k<=MIN)
        mid=MIN;
    else
        mid=MIN+1;
    *newnode=(struct node*)malloc(sizeof(struct node));
    for(i=mid+1;i<=MAX;i++)
    {
        (*newnode)->value[i-mid]=n->value[i];
        (*newnode)->child[i-mid]=n->child[i];
    }
    (*newnode)->count=MAX-mid;
    n->count=mid;
    if(k<=MIN)
        fillnode(val,c,n,k);
    else
        fillnode(val,c,*newnode,k-mid);
    *y=n->value[n->count];
    (*newnode)->child[0]=n->child[n->count];
    n->count--;
}
void display(struct node* root)
{
    int i;
    if(root!=NULL)
    {
        for(i=0;i<root->count;i++)
        {
            display(root->child[i]);
            printf("%d  ",root->value[i+1]);
        }
        display(root->child[i]);
    }
}
struct node* del(int val,struct node* root)
{
    struct node* temp;
    if(!delhelp(val,root))
        printf("\nValue %d not found in the tree",val);
    else
    {
        if(root->count==0)
        {
            temp=root;
            root=root->child[0];
            free(temp);
        }
    }
    return root;
}
int delhelp(int val,struct node* root)
{
    int i,flag;
    if(root==NULL)
        return 0;
    else
    {
        flag=searchnode(val,root,&i);
        if(flag)
        {
            if(root->child[i-1])
            {
                copysucc(root,i);
                flag=delhelp(root->value[i],root->child[i]);
                if(!flag)
                    printf("\nValue %d not found in the tree",val);
            }
            else
                clear(root,i);
        }
        else
            flag=delhelp(val,root->child[i]);
        if(root->child[i]!=NULL)
        {
            if(root->child[i]->count<MIN)
                restore(root,i);
        }
        return flag;
    }
}
void clear(struct node* p,int k)
{
    int i;
    for(i=k+1;i<=p->count;i++)
    {
        p->value[i-1]=p->value[i];
        p->child[i-1]=p->child[i];
    }
    p->count--;
}
void copysucc(struct node* k,int i)
{
    struct node* temp;
    temp=k->child[i];
    while(temp->child[0])
        temp=temp->child[0];
    k->value[i]=temp->value[1];
}
void restore(struct node* k,int i)
{
    if(i==0)
    {
        if(k->child[1]->count>MIN)
            leftshift(k,1);
        else
            merge(k,1);
    }
    else
    {
        if(i==k->count)
        {
            if(k->child[i-1]->count>MIN)
                leftshift(k,i);
            else
                merge(k,i);
        }
        else
        {
            if(k->child[i-1]->count>MIN)
                rightshift(k,i);
            else
            {
                if(k->child[i+1]->count>MIN)
                    leftshift(k,i+1);
                else
                    merge(k,i);
            }
        }
    }
}
void rightshift(struct node* p,int k)
{
    int i;
    struct node* temp;
    temp=p->child[k];
    for(i=temp->count;i>0;i--)
    {
        temp->value[i+1]=temp->value[i];
        temp->child[i+1]=temp->child[i];
    }
    temp->child[1]=temp->child[0];
    temp->count++;
    temp->value[1]=p->value[k];
    temp=p->child[k-1];
    p->value[k]=temp->value[temp->count];
    p->child[k]->child[0]=temp->child[temp->count];
    temp->count--;
}
void leftshift(struct node* p,int k)
{
    int i;
    struct node* temp;
    temp=p->child[k-1];
    temp->count++;
    temp->value[temp->count]=p->value[k];
    temp->child[temp->count]=p->child[k]->child[0];
    temp=p->child[k];
    p->value[k]=temp->value[1];
    temp->child[0]=temp->child[1];
    temp->count--;
    for(i=1;i<=temp->count;i++)
    {
        temp->value[i]=temp->value[i+1];
        temp->child[i]=temp->child[i+1];
    }
}
void merge(struct node* p,int k)
{
    int i;
    struct node *temp1,*temp2;
    temp1=p->child[k];
    temp2=p->child[k-1];
    temp2->count++;
    temp2->value[temp2->count]=p->value[k];
    temp2->child[temp2->count]=p->child[0];
    for(i=1;i<=temp1->count;i++)
    {
        temp2->count++;
        temp2->value[temp2->count]=temp1->value[i];
        temp2->child[temp2->count]=temp1->child[i];
    }
    for(i=k;i<p->count;i++)
    {
        p->value[i]=p->value[i+1];
        p->child[i]=p->child[i+1];
    }
    p->count--;
    free(temp1);
}
