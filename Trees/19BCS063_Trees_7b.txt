#include<stdio.h>
#include<string.h>
#include<stdlib.h>
typedef struct node
{
    int data;
    struct node *right;
    struct node *left;
}node;
node* create()
{
    node *p;
    char x[2];
    printf("\nEnter data($ for no node):");
    scanf("%s",x);
    if(strcmp(x,"$")==0)
    {
       return NULL;
    }
    p=(node*)malloc(sizeof(node));
    p->data=x[0];
    printf("Enter left child of %c:\n",x[0]);
    p->left=create();
    if(p->left==NULL){p->right=NULL;return p;}
    printf("Enter right child of %c:\n",x[0]);
    p->right=create();
    return p;
}
void postorder(struct node *root)
{
    if(root!=NULL)
    {
        postorder(root->left);
        postorder(root->right);
        printf("%c ",root->data);
    }
}
int leaf(struct node *a)
{
    if(a->right==NULL&&a->left==NULL)
        return 1;
    else
        return 0;
}
int max(int a,int b)
{
    return (a>b)?a:b;
}
int height(struct node *a)
{
    if(a==NULL||leaf(a))
        return 0;
    else
        return(max(height(a->left),height(a->right))+1);
}
int main()
{
    struct node *root;
    printf("\nEnter the elements of the binary tree:");
    root = create();
    printf("\nPOSTORDER TRAVERSAL: ");
    postorder(root);
    printf("\n");
    printf("The height of the left sub tree is %d", height(root->left)+1);
    printf("\nThe height of the right sub tree is %d", height(root->right)+1);
    printf("\nThe height of the tree is %d", height(root)+1);
    return 0;
}

