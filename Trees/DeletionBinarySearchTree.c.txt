#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef struct node
{
  char key;
  struct node *left;
  struct node *right;
}*tree;
struct node* createNode(int item)
{
    struct node* temp=(struct node*)malloc(sizeof(struct node));
    temp->key=item;
    temp->left=temp->right=NULL;
    return temp;
}
struct node* minNode(struct node* root)
{
    struct node* present=root;
    while(present->left!=NULL)
        present=present->left;
    return present;
}
struct node* deleteNode(struct node* root,int key)
{
    if(root==NULL)
    {
        return root;
    }
    if(key<root->key)
    {
        root->left=deleteNode(root->left,key);
    }
    else if(key>root->key)
    {
        root->right=deleteNode(root->right,key);
    }
    else
    {
        if(root->left==NULL)
        {
            struct node* temp=root->right;
            free(root);
            return temp;
        }
        else if(root->right=NULL)
        {
            struct node* temp=root->left;
            free(root);
            return temp;
        }
        struct node* temp=minNode(root->right);
        root->key=temp->key;
        root->right=deleteNode(root->right,temp->key);
    }
    return root;
}
void inorder(struct node* root)
{
    if(root!=NULL)
    {
        inorder(root->left);
        printf("%d ",root->key);
        inorder(root->right);
    }
}
struct node* insert(struct node* root,int key)
{
    if(root==NULL)
    {
        return createNode(key);
    }
    if(key<root->key)
    {
        root->left=insert(root->left,key);
    }
    else if(key>root->key)
    {
        root->right=insert(root->right,key);
    }
    return root;
}
int main()
{
  int n,i,key,del;
  struct node *tree=NULL;
  printf("\nEnter the number of nodes:");
  scanf("%d",&n);
  printf("\nInput the nodes of the binary search tree:");
  while(n>0)
  {
      scanf("%d",&key);
      tree=insert(tree,key);
      n--;
  }
  printf("\nInorder traversal of the Binary Search Tree:");
  inorder(tree);
  printf("\n");
  printf("\nEnter the node to be deleted:");
  scanf("%d",&del);
  deleteNode(tree,del);
  printf("\nInorder traversal of the Binary Search Tree after deletion:");
  inorder(tree);
  printf("\n");
  return 0;
}
/*OUTPUT:Enter the nodes of the binary search tree and the element to be deleted
from the binary search tree*/